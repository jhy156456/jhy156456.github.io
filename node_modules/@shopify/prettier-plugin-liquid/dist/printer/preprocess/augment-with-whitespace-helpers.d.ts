import { HtmlNodeTypes, LiquidNodeTypes, WithFamily } from '../../types';
import { Augment, AugmentedNode, WithCssProperties, WithParent, WithSiblings } from '../../types';
declare type RequiredAugmentations = WithParent & WithSiblings & WithFamily & WithCssProperties;
declare type AugmentedAstNode = AugmentedNode<RequiredAugmentations>;
export declare const augmentWithWhitespaceHelpers: Augment<RequiredAugmentations>;
declare type ParentNode = Extract<AugmentedAstNode, {
    children?: AugmentedAstNode[];
}>;
declare type HtmlNode = Extract<AugmentedAstNode, {
    type: typeof HtmlNodeTypes[number];
}>;
export declare function isHtmlNode(node: AugmentedAstNode): node is HtmlNode;
declare type LiquidNode = Extract<AugmentedAstNode, {
    type: typeof LiquidNodeTypes[number];
}>;
export declare function isLiquidNode(node: AugmentedAstNode | undefined): node is LiquidNode;
export declare function isParentNode(node: AugmentedAstNode): node is ParentNode;
export declare function isTrimmingOuterRight(node: AugmentedAstNode | undefined): boolean;
export declare function isTrimmingOuterLeft(node: AugmentedAstNode | undefined): boolean;
export declare function isTrimmingInnerLeft(node: AugmentedAstNode | undefined): boolean;
export declare function isTrimmingInnerRight(node: AugmentedAstNode | undefined): boolean;
export {};
