"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.augmentWithCSSProperties = void 0;
const constants_evaluate_1 = require("../../constants.evaluate");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
function getCssDisplayFromComment(body) {
    var _a;
    return (_a = body.match(/^\s*display:\s*([a-z]+)\s*$/)) === null || _a === void 0 ? void 0 : _a[1];
}
function getCssWhitespaceFromComment(body) {
    var _a;
    return (_a = body.match(/^\s*white-?space:\s*([a-z]+)\s*$/)) === null || _a === void 0 ? void 0 : _a[1];
}
function getCssDisplay(node, options) {
    if (node.prev && node.prev.type === types_1.NodeTypes.HtmlComment) {
        const cssDisplay = getCssDisplayFromComment(node.prev.body);
        if (cssDisplay) {
            return cssDisplay;
        }
    }
    if (node.prev &&
        node.prev.type === types_1.NodeTypes.LiquidTag &&
        node.prev.name === '#') {
        const cssDisplay = getCssDisplayFromComment(node.prev.markup);
        if (cssDisplay) {
            return cssDisplay;
        }
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return ((node.name.length === 1 &&
                        node.name[0].type === types_1.NodeTypes.TextNode &&
                        constants_evaluate_1.CSS_DISPLAY_TAGS[node.name[0].value]) ||
                        constants_evaluate_1.CSS_DISPLAY_DEFAULT);
                }
            }
        }
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlRawNode: {
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return constants_evaluate_1.CSS_DISPLAY_TAGS[node.name] || constants_evaluate_1.CSS_DISPLAY_DEFAULT;
                }
            }
        }
        case types_1.NodeTypes.RawMarkup:
        case types_1.NodeTypes.TextNode:
            return 'inline';
        case types_1.NodeTypes.LiquidTag:
        case types_1.NodeTypes.LiquidRawTag:
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return (constants_evaluate_1.CSS_DISPLAY_LIQUID_TAGS[node.name] || constants_evaluate_1.CSS_DISPLAY_LIQUID_DEFAULT);
                }
            }
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return 'inline';
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return 'inline';
        case types_1.NodeTypes.HtmlDoctype:
        case types_1.NodeTypes.HtmlComment:
            return 'block';
        case types_1.NodeTypes.Document:
            return 'block';
        case types_1.NodeTypes.YAMLFrontmatter:
            return 'block';
        case types_1.NodeTypes.LiquidVariable:
        case types_1.NodeTypes.LiquidFilter:
        case types_1.NodeTypes.NamedArgument:
        case types_1.NodeTypes.LiquidLiteral:
        case types_1.NodeTypes.String:
        case types_1.NodeTypes.Number:
        case types_1.NodeTypes.Range:
        case types_1.NodeTypes.VariableLookup:
        case types_1.NodeTypes.AssignMarkup:
        case types_1.NodeTypes.CycleMarkup:
        case types_1.NodeTypes.ForMarkup:
        case types_1.NodeTypes.PaginateMarkup:
        case types_1.NodeTypes.RenderMarkup:
        case types_1.NodeTypes.RenderVariableExpression:
        case types_1.NodeTypes.LogicalExpression:
        case types_1.NodeTypes.Comparison:
            return 'should not be relevant';
        default:
            return (0, utils_1.assertNever)(node);
    }
}
function getNodeCssStyleWhiteSpace(node) {
    if (node.prev && node.prev.type === types_1.NodeTypes.HtmlComment) {
        const whitespace = getCssWhitespaceFromComment(node.prev.body);
        if (whitespace) {
            return whitespace;
        }
    }
    if (node.prev &&
        node.prev.type === types_1.NodeTypes.LiquidTag &&
        node.prev.name === '#') {
        const whitespace = getCssWhitespaceFromComment(node.prev.markup);
        if (whitespace) {
            return whitespace;
        }
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return ((node.name.length === 1 &&
                node.name[0].type === types_1.NodeTypes.TextNode &&
                constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name[0].value]) ||
                constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT);
        }
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlRawNode: {
            return constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name] || constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        }
        case types_1.NodeTypes.TextNode:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.RawMarkup:
        case types_1.NodeTypes.YAMLFrontmatter:
        case types_1.NodeTypes.LiquidRawTag:
            return 'pre';
        case types_1.NodeTypes.LiquidTag:
            return constants_evaluate_1.CSS_WHITE_SPACE_LIQUID_TAGS[node.name] || constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.HtmlDoctype:
        case types_1.NodeTypes.HtmlComment:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.Document:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidVariable:
        case types_1.NodeTypes.LiquidFilter:
        case types_1.NodeTypes.NamedArgument:
        case types_1.NodeTypes.LiquidLiteral:
        case types_1.NodeTypes.String:
        case types_1.NodeTypes.Number:
        case types_1.NodeTypes.Range:
        case types_1.NodeTypes.VariableLookup:
        case types_1.NodeTypes.AssignMarkup:
        case types_1.NodeTypes.CycleMarkup:
        case types_1.NodeTypes.ForMarkup:
        case types_1.NodeTypes.PaginateMarkup:
        case types_1.NodeTypes.RenderMarkup:
        case types_1.NodeTypes.RenderVariableExpression:
        case types_1.NodeTypes.LogicalExpression:
        case types_1.NodeTypes.Comparison:
            return 'should not be relevant';
        default:
            return (0, utils_1.assertNever)(node);
    }
}
const augmentWithCSSProperties = (options, node) => {
    const augmentations = {
        cssDisplay: getCssDisplay(node, options),
        cssWhitespace: getNodeCssStyleWhiteSpace(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithCSSProperties = augmentWithCSSProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLWNzcy1wcm9wZXJ0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtY3NzLXByb3BlcnRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkRBUThCO0FBQzlCLG1DQU9pQjtBQUNqQixtQ0FBc0M7QUFFdEMsU0FBUyx3QkFBd0IsQ0FBQyxJQUFZOztJQUM1QyxPQUFPLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQywwQ0FBRyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUywyQkFBMkIsQ0FBQyxJQUFZOztJQUMvQyxPQUFPLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQywwQ0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQ3BCLElBQWlDLEVBQ2pDLE9BQTRCO0lBRTVCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFBRTtRQUV6RCxNQUFNLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksVUFBVSxFQUFFO1lBQ2QsT0FBTyxVQUFVLENBQUM7U0FDbkI7S0FDRjtJQUVELElBQ0UsSUFBSSxDQUFDLElBQUk7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFNBQVM7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUN0QjtRQUVBLE1BQU0sVUFBVSxHQUFHLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSSxVQUFVLEVBQUU7WUFDZCxPQUFPLFVBQVUsQ0FBQztT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