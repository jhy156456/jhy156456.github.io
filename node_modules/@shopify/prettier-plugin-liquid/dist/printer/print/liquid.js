"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printLiquidBranch = exports.printLiquidRawTag = exports.printLiquidTag = exports.printLiquidBlockEnd = exports.printLiquidBlockStart = exports.printLiquidDrop = void 0;
const prettier_1 = require("prettier");
const types_1 = require("../../types");
const stage_2_ast_1 = require("../../parser/stage-2-ast");
const utils_1 = require("../../utils");
const utils_2 = require("../../printer/utils");
const children_1 = require("../../printer/print/children");
const LIQUID_TAGS_THAT_ALWAYS_BREAK = ['for', 'case'];
const { builders, utils } = prettier_1.doc;
const { group, hardline, ifBreak, indent, join, line, softline, literalline } = builders;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printLiquidDrop(path, _options, print, { leadingSpaceGroupId, trailingSpaceGroupId }) {
    const node = path.getValue();
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    if (typeof node.markup !== 'string') {
        const whitespace = node.markup.filters.length > 0 ? line : ' ';
        return group([
            '{{',
            whitespaceStart,
            indent([whitespace, path.call(print, 'markup')]),
            whitespace,
            whitespaceEnd,
            '}}',
        ]);
    }
    const lines = (0, utils_2.markupLines)(node.markup);
    if (lines.length > 1) {
        return group([
            '{{',
            whitespaceStart,
            indent([hardline, join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '}}',
        ]);
    }
    return group([
        '{{',
        whitespaceStart,
        ' ',
        node.markup,
        ' ',
        whitespaceEnd,
        '}}',
    ]);
}
exports.printLiquidDrop = printLiquidDrop;
function printNamedLiquidBlockStart(path, _options, print, args, whitespaceStart, whitespaceEnd) {
    const node = path.getValue();
    const { isLiquidStatement } = args;
    const { wrapper, prefix, suffix } = (() => {
        if (isLiquidStatement) {
            return {
                wrapper: utils.removeLines,
                prefix: '',
                suffix: () => '',
            };
        }
        else {
            return {
                wrapper: group,
                prefix: ['{%', whitespaceStart, ' '],
                suffix: (trailingWhitespace) => [
                    trailingWhitespace,
                    whitespaceEnd,
                    '%}',
                ],
            };
        }
    })();
    const tag = (trailingWhitespace) => wrapper([
        ...prefix,
        node.name,
        ' ',
        indent(path.call((p) => print(p, args), 'markup')),
        ...suffix(trailingWhitespace),
    ]);
    const tagWithArrayMarkup = (whitespace) => wrapper([
        ...prefix,
        node.name,
        ' ',
        indent([
            join([',', line], path.map((p) => print(p, args), 'markup')),
        ]),
        ...suffix(whitespace),
    ]);
    switch (node.name) {
        case types_1.NamedTags.echo: {
            const trailingWhitespace = node.markup.filters.length > 0 ? line : ' ';
            return tag(trailingWhitespace);
        }
        case types_1.NamedTags.assign: {
            const trailingWhitespace = node.markup.value.filters.length > 0 ? line : ' ';
            return tag(trailingWhitespace);
        }
        case types_1.NamedTags.cycle: {
            const whitespace = node.markup.args.length > 1 ? line : ' ';
            return wrapper([
                ...prefix,
                node.name,
                node.markup.groupName ? ' ' : '',
                indent(path.call((p) => print(p, args), 'markup')),
                ...suffix(whitespace),
            ]);
        }
        case types_1.NamedTags.include:
        case types_1.NamedTags.render: {
            const markup = node.markup;
            const trailingWhitespace = markup.args.length > 0 || (markup.variable && markup.alias)
                ? line
                : ' ';
            return tag(trailingWhitespace);
        }
        case types_1.NamedTags.capture:
        case types_1.NamedTags.increment:
        case types_1.NamedTags.decrement:
        case types_1.NamedTags.layout:
        case types_1.NamedTags.section: {
            return tag(' ');
        }
        case types_1.NamedTags.sections: {
            return tag(' ');
        }
        case types_1.NamedTags.form: {
            const trailingWhitespace = node.markup.length > 1 ? line : ' ';
            return tagWithArrayMarkup(trailingWhitespace);
        }
        case types_1.NamedTags.tablerow:
        case types_1.NamedTags.for: {
            const trailingWhitespace = node.markup.reversed || node.markup.args.length > 0 ? line : ' ';
            return tag(trailingWhitespace);
        }
        case types_1.NamedTags.paginate: {
            return tag(line);
        }
        case types_1.NamedTags.if:
        case types_1.NamedTags.elsif:
        case types_1.NamedTags.unless: {
            const trailingWhitespace = [
                types_1.NodeTypes.Comparison,
                types_1.NodeTypes.LogicalExpression,
            ].includes(node.markup.type)
                ? line
                : ' ';
            return tag(trailingWhitespace);
        }
        case types_1.NamedTags.case: {
            return tag(' ');
        }
        case types_1.NamedTags.when: {
            const trailingWhitespace = node.markup.length > 1 ? line : ' ';
            return tagWithArrayMarkup(trailingWhitespace);
        }
        case types_1.NamedTags.liquid: {
            return group([
                ...prefix,
                node.name,
                indent([
                    hardline,
                    join(hardline, path.map((p) => {
                        const curr = p.getValue();
                        return [
                            getSpaceBetweenLines(curr.prev, curr),
                            print(p, Object.assign(Object.assign({}, args), { isLiquidStatement: true })),
                        ];
                    }, 'markup')),
                ]),
                ...suffix(hardline),
            ]);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function printLiquidStatement(path, _options, _print, _args) {
    const node = path.getValue();
    const shouldSkipLeadingSpace = node.markup.trim() === '' ||
        (node.name === '#' && node.markup.startsWith('#'));
    return prettier_1.doc.utils.removeLines([
        node.name,
        shouldSkipLeadingSpace ? '' : ' ',
        node.markup,
    ]);
}
function printLiquidBlockStart(path, options, print, args = {}) {
    const node = path.getValue();
    const { leadingSpaceGroupId, trailingSpaceGroupId } = args;
    if (!node.name)
        return '';
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, needsBlockStartLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, needsBlockStartTrailingWhitespaceStrippingOnBreak(node), trailingSpaceGroupId);
    if (typeof node.markup !== 'string') {
        return printNamedLiquidBlockStart(path, options, print, args, whitespaceStart, whitespaceEnd);
    }
    if (args.isLiquidStatement) {
        return printLiquidStatement(path, options, print, args);
    }
    const lines = (0, utils_2.markupLines)(node.markup);
    if (node.name === 'liquid') {
        return group([
            '{%',
            whitespaceStart,
            ' ',
            node.name,
            indent([hardline, join(hardline, (0, utils_2.reindent)(lines, true))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    if (lines.length > 1) {
        return group([
            '{%',
            whitespaceStart,
            indent([hardline, node.name, ' ', join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    const markup = node.markup;
    return group([
        '{%',
        whitespaceStart,
        ' ',
        node.name,
        markup ? ` ${markup}` : '',
        ' ',
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockStart = printLiquidBlockStart;
function printLiquidBlockEnd(path, _options, _print, args = {}) {
    var _a, _b;
    const node = path.getValue();
    const { isLiquidStatement, leadingSpaceGroupId, trailingSpaceGroupId } = args;
    if (!node.children || !node.blockEndPosition)
        return '';
    if (isLiquidStatement) {
        return ['end', node.name];
    }
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)((_a = node.delimiterWhitespaceStart) !== null && _a !== void 0 ? _a : '', needsBlockEndLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)((_b = node.delimiterWhitespaceEnd) !== null && _b !== void 0 ? _b : '', (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    return group([
        '{%',
        whitespaceStart,
        ` end${node.name} `,
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockEnd = printLiquidBlockEnd;
function getNodeContent(node) {
    if (!node.children || !node.blockEndPosition)
        return '';
    return node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start);
}
function printLiquidTag(path, options, print, args) {
    const { leadingSpaceGroupId, trailingSpaceGroupId } = args;
    const node = path.getValue();
    if (!node.children || !node.blockEndPosition) {
        return printLiquidBlockStart(path, options, print, args);
    }
    if (!args.isLiquidStatement && (0, utils_2.shouldPreserveContent)(node)) {
        return [
            printLiquidBlockStart(path, options, print, Object.assign(Object.assign({}, args), { leadingSpaceGroupId, trailingSpaceGroupId: utils_2.FORCE_FLAT_GROUP_ID })),
            ...replaceTextEndOfLine(getNodeContent(node)),
            printLiquidBlockEnd(path, options, print, Object.assign(Object.assign({}, args), { leadingSpaceGroupId: utils_2.FORCE_FLAT_GROUP_ID, trailingSpaceGroupId })),
        ];
    }
    const tagGroupId = Symbol('tag-group');
    const blockStart = printLiquidBlockStart(path, options, print, Object.assign(Object.assign({}, args), { leadingSpaceGroupId, trailingSpaceGroupId: tagGroupId }));
    const blockEnd = printLiquidBlockEnd(path, options, print, Object.assign(Object.assign({}, args), { leadingSpaceGroupId: tagGroupId, trailingSpaceGroupId }));
    let body = [];
    if ((0, stage_2_ast_1.isBranchedTag)(node)) {
        body = cleanDoc(path.map((p) => print(p, Object.assign(Object.assign({}, args), { leadingSpaceGroupId: tagGroupId, trailingSpaceGroupId: tagGroupId })), 'children'));
        if (node.name === 'case')
            body = indent(body);
    }
    else if (node.children.length > 0) {
        body = indent([
            innerLeadingWhitespace(node),
            (0, children_1.printChildren)(path, options, print, Object.assign(Object.assign({}, args), { leadingSpaceGroupId: tagGroupId, trailingSpaceGroupId: tagGroupId })),
        ]);
    }
    return group([blockStart, body, innerTrailingWhitespace(node, args), blockEnd], {
        id: tagGroupId,
        shouldBreak: LIQUID_TAGS_THAT_ALWAYS_BREAK.includes(node.name) ||
            (0, utils_2.originallyHadLineBreaks)(path, options) ||
            (0, utils_2.isAttributeNode)(node) ||
            (0, utils_2.isDeeplyNested)(node),
    });
}
exports.printLiquidTag = printLiquidTag;
function printLiquidRawTag(path, options, print, { isLiquidStatement }) {
    let body = [];
    const node = path.getValue();
    const hasEmptyBody = node.body.value.trim() === '';
    const shouldNotIndentBody = node.name === 'schema' && !options.indentSchema;
    const shouldPrintAsIs = node.isIndentationSensitive ||
        !(0, utils_2.hasLineBreakInRange)(node.source, node.body.position.start, node.body.position.end);
    const blockStart = isLiquidStatement
        ? [node.name]
        : group([
            '{%',
            node.whitespaceStart,
            ' ',
            node.name,
            ' ',
            node.markup ? `${node.markup} ` : '',
            node.whitespaceEnd,
            '%}',
        ]);
    const blockEnd = isLiquidStatement
        ? ['end', node.name]
        : [
            '{%',
            node.whitespaceStart,
            ' ',
            'end',
            node.name,
            ' ',
            node.whitespaceEnd,
            '%}',
        ];
    if (shouldPrintAsIs) {
        body = [
            node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start),
        ];
    }
    else if (hasEmptyBody) {
        body = [hardline];
    }
    else if (shouldNotIndentBody) {
        body = [hardline, path.call(print, 'body'), hardline];
    }
    else {
        body = [indent([hardline, path.call(print, 'body')]), hardline];
    }
    return [blockStart, ...body, blockEnd];
}
exports.printLiquidRawTag = printLiquidRawTag;
function innerLeadingWhitespace(node) {
    if (!node.firstChild) {
        if (node.isDanglingWhitespaceSensitive && node.hasDanglingWhitespace) {
            return line;
        }
        else {
            return '';
        }
    }
    if (node.firstChild.hasLeadingWhitespace &&
        node.firstChild.isLeadingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function innerTrailingWhitespace(node, args) {
    if ((!args.isLiquidStatement && (0, utils_2.shouldPreserveContent)(node)) ||
        node.type === types_1.NodeTypes.LiquidBranch ||
        !node.blockEndPosition ||
        !node.lastChild) {
        return '';
    }
    if (node.lastChild.hasTrailingWhitespace &&
        node.lastChild.isTrailingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function printLiquidDefaultBranch(path, options, print, args) {
    const branch = path.getValue();
    const parentNode = path.getParentNode();
    const shouldCollapseSpace = (0, utils_2.isEmpty)(branch.children) && parentNode.children.length === 1;
    if (shouldCollapseSpace)
        return '';
    const isBranchEmptyWithoutSpace = (0, utils_2.isEmpty)(branch.children) && !branch.hasDanglingWhitespace;
    if (isBranchEmptyWithoutSpace)
        return '';
    if (branch.hasDanglingWhitespace) {
        return ifBreak('', ' ');
    }
    const shouldAddTrailingNewline = branch.next &&
        branch.children.length > 0 &&
        branch.source
            .slice((0, utils_2.last)(branch.children).position.end, branch.next.position.start)
            .replace(/ |\t/g, '').length >= 2;
    return indent([
        innerLeadingWhitespace(parentNode),
        (0, children_1.printChildren)(path, options, print, args),
        shouldAddTrailingNewline ? literalline : '',
    ]);
}
function printLiquidBranch(path, options, print, args) {
    const branch = path.getValue();
    const isDefaultBranch = !branch.name;
    if (isDefaultBranch) {
        return printLiquidDefaultBranch(path, options, print, args);
    }
    const leftSibling = branch.prev;
    const shouldCollapseSpace = leftSibling && (0, utils_2.isEmpty)(leftSibling.children);
    const outerLeadingWhitespace = branch.hasLeadingWhitespace && !shouldCollapseSpace ? line : softline;
    const shouldAddTrailingNewline = branch.next &&
        branch.children.length > 0 &&
        branch.source
            .slice((0, utils_2.last)(branch.children).position.end, branch.next.position.start)
            .replace(/ |\t/g, '').length >= 2;
    return [
        outerLeadingWhitespace,
        printLiquidBlockStart(path, options, print, args),
        indent([
            innerLeadingWhitespace(branch),
            (0, children_1.printChildren)(path, options, print, args),
            shouldAddTrailingNewline ? literalline : '',
        ]),
    ];
}
exports.printLiquidBranch = printLiquidBranch;
function needsBlockStartLeadingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            return (!(0, utils_2.isAttributeNode)(node) && (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (!(0, utils_2.isAttributeNode)(node.parentNode) &&
                (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockStartTrailingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            if ((0, stage_2_ast_1.isBranchedTag)(node)) {
                return needsBlockStartLeadingWhitespaceStrippingOnBreak(node.firstChild);
            }
            if (!node.children) {
                return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node);
            }
            return (0, utils_2.isEmpty)(node.children)
                ? (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node)
                : (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild);
        }
        case types_1.NodeTypes.LiquidBranch: {
            if ((0, utils_2.isAttributeNode)(node.parentNode)) {
                return false;
            }
            return node.firstChild
                ? (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild)
                : (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockEndLeadingWhitespaceStrippingOnBreak(node) {
    if (!node.children) {
        throw new Error('Should only call needsBlockEndLeadingWhitespaceStrippingOnBreak for tags that have closing tags');
    }
    else if ((0, utils_2.isAttributeNode)(node)) {
        return false;
    }
    else if ((0, stage_2_ast_1.isBranchedTag)(node)) {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
    else if ((0, utils_2.isEmpty)(node.children)) {
        return (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
    }
    else {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
}
function cleanDoc(doc) {
    return doc.filter((x) => x !== '');
}
function getSchema(contents, options) {
    try {
        return [JSON.stringify(JSON.parse(contents), null, options.tabWidth), true];
    }
    catch (e) {
        return [contents, false];
    }
}
function getSpaceBetweenLines(prev, curr) {
    if (!prev)
        return '';
    const source = curr.source;
    const whitespaceBetweenNodes = source.slice(prev.position.end, curr.position.start);
    const hasMoreThanOneNewLine = (whitespaceBetweenNodes.match(/\n/g) || []).length > 1;
    return hasMoreThanOneNewLine ? hardline : '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJpbnQvbGlxdWlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUE2QztBQUM3QyxtQ0FjaUI7QUFDakIsc0RBQXFEO0FBQ3JELG1DQUFzQztBQUV0QywyQ0FnQnlCO0FBRXpCLHVEQUF5RDtBQUV6RCxNQUFNLDZCQUE2QixHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXRELE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsY0FBRyxDQUFDO0FBQ2hDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQzNFLFFBQVEsQ0FBQztBQUNYLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLGNBQUcsQ0FBQyxLQUFZLENBQUM7QUFFbEQsU0FBZ0IsZUFBZSxDQUM3QixJQUFtQixFQUNuQixRQUE2QixFQUM3QixLQUFvQixFQUNwQixFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFxQjtJQUVoRSxNQUFNLElBQUksR0FBZSxJQUFJLENBQUMsUUFBUSxFQUFnQixDQUFDO0lBQ3ZELE1BQU0sZUFBZSxHQUFHLElBQUEseUJBQWlCLEVBQ3ZDLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUEsNENBQW9DLEVBQUMsSUFBSSxDQUFDLEVBQzFDLG1CQUFtQixDQUNwQixDQUFDO0lBQ0YsTUFBTSxhQUFhLEdBQUcsSUFBQSx5QkFBaUIsRUFDckMsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBQSw2Q0FBcUMsRUFBQyxJQUFJLENBQUMsRUFDM0Msb0JBQW9CLENBQ3JCLENBQUM7SUFFRixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxD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