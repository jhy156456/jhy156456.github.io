import { Doc, AstPath, ParserOptions } from 'prettier';
import * as AST from './parser/stage-2-ast';
export interface Position {
    start: number;
    end: number;
}
export declare enum NodeTypes {
    Document = "Document",
    LiquidRawTag = "LiquidRawTag",
    LiquidTag = "LiquidTag",
    LiquidBranch = "LiquidBranch",
    LiquidDrop = "LiquidDrop",
    HtmlSelfClosingElement = "HtmlSelfClosingElement",
    HtmlVoidElement = "HtmlVoidElement",
    HtmlDoctype = "HtmlDoctype",
    HtmlComment = "HtmlComment",
    HtmlElement = "HtmlElement",
    HtmlRawNode = "HtmlRawNode",
    AttrSingleQuoted = "AttrSingleQuoted",
    AttrDoubleQuoted = "AttrDoubleQuoted",
    AttrUnquoted = "AttrUnquoted",
    AttrEmpty = "AttrEmpty",
    TextNode = "TextNode",
    YAMLFrontmatter = "YAMLFrontmatter",
    LiquidVariable = "LiquidVariable",
    LiquidFilter = "LiquidFilter",
    NamedArgument = "NamedArgument",
    LiquidLiteral = "LiquidLiteral",
    String = "String",
    Number = "Number",
    Range = "Range",
    VariableLookup = "VariableLookup",
    Comparison = "Comparison",
    LogicalExpression = "LogicalExpression",
    AssignMarkup = "AssignMarkup",
    CycleMarkup = "CycleMarkup",
    ForMarkup = "ForMarkup",
    PaginateMarkup = "PaginateMarkup",
    RawMarkup = "RawMarkup",
    RenderMarkup = "RenderMarkup",
    RenderVariableExpression = "RenderVariableExpression"
}
export declare function isLiquidHtmlNode(value: any): value is LiquidHtmlNode;
export declare enum NamedTags {
    assign = "assign",
    capture = "capture",
    case = "case",
    cycle = "cycle",
    decrement = "decrement",
    echo = "echo",
    elsif = "elsif",
    for = "for",
    form = "form",
    if = "if",
    include = "include",
    increment = "increment",
    layout = "layout",
    liquid = "liquid",
    paginate = "paginate",
    render = "render",
    section = "section",
    sections = "sections",
    tablerow = "tablerow",
    unless = "unless",
    when = "when"
}
export declare enum Comparators {
    CONTAINS = "contains",
    EQUAL = "==",
    GREATER_THAN = ">",
    GREATER_THAN_OR_EQUAL = ">=",
    LESS_THAN = "<",
    LESS_THAN_OR_EQUAL = "<=",
    NOT_EQUAL = "!="
}
export declare const HtmlNodeTypes: readonly [NodeTypes.HtmlElement, NodeTypes.HtmlRawNode, NodeTypes.HtmlVoidElement, NodeTypes.HtmlSelfClosingElement];
export declare const LiquidNodeTypes: readonly [NodeTypes.LiquidTag, NodeTypes.LiquidDrop, NodeTypes.LiquidBranch, NodeTypes.LiquidRawTag];
export declare type LiquidAstPath = AstPath<LiquidHtmlNode>;
export declare type LiquidParserOptions = ParserOptions<LiquidHtmlNode> & {
    singleAttributePerLine: boolean;
    singleLineLinkTags: boolean;
    liquidSingleQuote: boolean;
    embeddedSingleQuote: boolean;
    indentSchema: boolean;
};
export declare type LiquidPrinterArgs = {
    leadingSpaceGroupId?: symbol[] | symbol;
    trailingSpaceGroupId?: symbol[] | symbol;
    isLiquidStatement?: boolean;
    truncate?: boolean;
};
export declare type LiquidPrinter = (path: AstPath<LiquidHtmlNode>, args?: LiquidPrinterArgs) => Doc;
export declare const nonTraversableProperties: Set<string>;
export declare type Augmented<T, Aug> = {
    [Property in keyof T]: [T[Property]] extends [(infer Item)[] | undefined] ? [Item] extends [AST.LiquidHtmlNode] ? Augmented<Item, Aug>[] : Item[] : T[Property] extends infer P ? P extends AST.LiquidHtmlNode ? Augmented<P, Aug> : P : never;
} & Aug;
export declare type AllAugmentations = WithParent & WithSiblings & WithFamily & WithCssProperties & WithWhitespaceHelpers;
export declare type WithParent = {
    parentNode?: ParentNode;
};
export declare type WithSiblings = {
    prev: LiquidHtmlNode | undefined;
    next: LiquidHtmlNode | undefined;
};
export declare type WithFamily = {
    firstChild: LiquidHtmlNode | undefined;
    lastChild: LiquidHtmlNode | undefined;
};
export declare type WithCssProperties = {
    cssDisplay: string;
    cssWhitespace: string;
};
export declare type WithWhitespaceHelpers = {
    isDanglingWhitespaceSensitive: boolean;
    isWhitespaceSensitive: boolean;
    isLeadingWhitespaceSensitive: boolean;
    isTrailingWhitespaceSensitive: boolean;
    isIndentationSensitive: boolean;
    hasLeadingWhitespace: boolean;
    hasTrailingWhitespace: boolean;
    hasDanglingWhitespace: boolean;
};
export declare type AugmentedNode<Aug> = Augmented<AST.LiquidHtmlNode, Aug>;
export declare type Augment<Aug> = <NodeType extends AugmentedNode<Aug>>(options: LiquidParserOptions, node: NodeType, parentNode?: NodeType) => void;
export declare type LiquidHtmlNode = Augmented<AST.LiquidHtmlNode, AllAugmentations>;
export declare type DocumentNode = Augmented<AST.DocumentNode, AllAugmentations>;
export declare type LiquidNode = Augmented<AST.LiquidNode, AllAugmentations>;
export declare type LiquidStatement = Augmented<AST.LiquidStatement, AllAugmentations>;
export declare type ParentNode = Augmented<AST.ParentNode, AllAugmentations>;
export declare type LiquidRawTag = Augmented<AST.LiquidRawTag, AllAugmentations>;
export declare type LiquidTag = Augmented<AST.LiquidTag, AllAugmentations>;
export declare type LiquidTagNamed = Augmented<AST.LiquidTagNamed, AllAugmentations>;
export declare type LiquidBranch = Augmented<AST.LiquidBranch, AllAugmentations>;
export declare type LiquidBranchNamed = Augmented<AST.LiquidBranchNamed, AllAugmentations>;
export declare type LiquidDrop = Augmented<AST.LiquidDrop, AllAugmentations>;
export declare type HtmlNode = Augmented<AST.HtmlNode, AllAugmentations>;
export declare type HtmlTag = Exclude<HtmlNode, HtmlComment>;
export declare type HtmlElement = Augmented<AST.HtmlElement, AllAugmentations>;
export declare type HtmlVoidElement = Augmented<AST.HtmlVoidElement, AllAugmentations>;
export declare type HtmlSelfClosingElement = Augmented<AST.HtmlSelfClosingElement, AllAugmentations>;
export declare type HtmlRawNode = Augmented<AST.HtmlRawNode, AllAugmentations>;
export declare type HtmlDoctype = Augmented<AST.HtmlDoctype, AllAugmentations>;
export declare type HtmlComment = Augmented<AST.HtmlComment, AllAugmentations>;
export declare type AttributeNode = Augmented<AST.AttributeNode, AllAugmentations>;
export declare type AttrSingleQuoted = Augmented<AST.AttrSingleQuoted, AllAugmentations>;
export declare type AttrDoubleQuoted = Augmented<AST.AttrDoubleQuoted, AllAugmentations>;
export declare type AttrUnquoted = Augmented<AST.AttrUnquoted, AllAugmentations>;
export declare type AttrEmpty = Augmented<AST.AttrEmpty, AllAugmentations>;
export declare type LiquidExpression = Augmented<AST.LiquidExpression, AllAugmentations>;
export declare type TextNode = Augmented<AST.TextNode, AllAugmentations>;
